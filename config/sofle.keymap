/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
/*
 * Temporarily here because nice nano v2 spi is not defined on ZMK Yet
 * Source: https://github.com/zmkfirmware/zmk/blob/main/app/boards/shields/reviung41/boards/nice_nano.overlay
 * GitHub Issue: https://github.com/zmkfirmware/zmk/issues/885
 */

#include <dt-bindings/led/led.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

&pinctrl {
    spi3_default: spi3_default {
        group1 { psels = <NRF_PSEL(SPIM_MOSI, 0, 8)>; };
    };

    spi3_sleep: spi3_sleep {
        group1 {
            psels = <NRF_PSEL(SPIM_MOSI, 0, 8)>;
            low-power-enable;
        };
    };
};

&spi3 {
    compatible = "nordic,nrf-spim";
    status = "okay";
    pinctrl-0 = <&spi3_default>;
    pinctrl-1 = <&spi3_sleep>;
    pinctrl-names = "default", "sleep";

    led_strip: ws2812@0 {
        compatible = "worldsemi,ws2812-spi";
        label = "WS2812";

        /* SPI */

        reg = <0>; /* ignored, but necessary for SPI bindings */
        spi-max-frequency = <4000000>;

        /* WS2812 */

        chain-length = <29>;
        spi-one-frame = <0x70>;
        spi-zero-frame = <0x40>;
        color-mapping = <LED_COLOR_ID_GREEN LED_COLOR_ID_RED LED_COLOR_ID_BLUE>;
    };
};

/ {
    chosen { zmk,underglow = &led_strip; };
};

/* END temporary RGB support section */

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------------------------------
            // |  `    |  1  |  2  |  3   |  4   |  5   |                         |  6   |  7    |  8    |  9   |   0   |       |
            // |  ESC  |  Q  |  W  |  E   |  R   |  T   |                         |  Y   |  U    |  I    |  O   |   P   | BKSPC |
            // |  TAB  |  A  |  S  |  D   |  F   |  G   |                         |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |  MUTE  |        | ExtPw |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //               | GUI | ALT  | CTRL | LOWER|  ENTER |        | SPACE | RAISE| CTRL  | ALT   | GUI  |

            bindings = <
&kp ESCAPE     &kp N1  &kp N2    &kp N3            &kp N4        &kp N5                            &kp N6     &kp N7   &kp N8            &kp N9             &kp N0    &kp MINUS
&kp GRAVE      &kp Q   &kp W     &kp E             &kp R         &kp T                             &kp Y      &kp U    &kp I             &kp O              &kp P     &kp BSPC
&kp TAB        &kp A   &kp S     &kp D             &kp F         &kp G                             &kp H      &kp J    &kp K             &kp L              &kp SEMI  &kp ENTER
&kp BACKSLASH  &kp Z   &kp X     &kp C             &kp V         &kp B       &mo 1       &mo 2     &kp N      &kp M    &kp COMMA         &kp DOT            &kp FSLH  &kp EQUAL
                       &kp CLCK  &kp LEFT_CONTROL  &kp LEFT_ALT  &kp LSHIFT  &kp LGUI    &kp LGUI  &kp SPACE  &kp SQT  &kp LEFT_BRACKET  &kp RIGHT_BRACKET
            >;
        };

        lower_layer {
            // TODO: Some binds are waiting for shifted keycode support.
            // ------------------------------------------------------------------------------------------------------------
            // |       |  F1 |  F2 |  F3  |  F4  |  F5  |                   |  F6  |  F7   |  F8   |  F9  |  F10  |  F11  |
            // | `     |   1 |   2 |   3  |   4  |   5  |                   |   6  |   7   |   8   |   9  |    0  |  F12  |
            // |       |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   |   |
            // |       |  =  |  -  |  +   |  {   |  }   |        |  |       |  [   |  ]    |  ;    |  :   |   \   |       |
            //               |     |      |      |      |        |  |       |      |       |       |      |

            bindings = <
&trans     &kp F1     &kp F2          &kp F3       &kp F4           &kp F5                                               &kp F6         &kp F7     &kp F8          &kp F9     &kp F10   &kp F11
&kp GRAVE  &kp N1     &kp N2          &kp N3       &kp N4           &kp N5                                               &kp LA(LG(I))  &kp N7     &kp UP_ARROW    &kp N9     &kp F12   &kp DELETE
&trans     &kp EXCL   &kp LEFT_SHIFT  &kp HASH     &kp DLLR         &kp PRCNT                                            &kp LG(A)      &kp LEFT   &kp DOWN_ARROW  &kp RIGHT  &kp RPAR  &kp PIPE
&trans     &kp EQUAL  &kp MINUS       &kp KP_PLUS  &kp LBRC         &kp RBRC         &trans             &trans           &kp LG(C)      &kp LG(V)  &kp LG(S)       &kp COLON  &kp BSLH  &trans
                      &trans          &trans       &rgb_ug RGB_BRI  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF    &rgb_ug RGB_TOG  &trans         &trans     &trans          &trans
            >;
        };

        raise_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |BTCLR| BT1  | BT2  |  BT3  |  BT4  |  BT5 |                 |      |      |       |      |       |       |
            // |     | INS  | PSCR | GUI   |       |      |                 | PGUP |      |   ^   |      |       |       |
            // |     | ALT  | CTRL | SHIFT |       | CAPS |                 | PGDN |   <- |   v   |  ->  |  DEL  | BKSPC |
            // |     | UNDO | CUT  | COPY  | PASTE |      |      |   | RGB  |      |      |       |      |       |       |
            //              |      |       |       |      |      |   |      |      |      |       |      |

            bindings = <
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1     &bt BT_SEL 2    &bt BT_SEL 3     &bt BT_SEL 4                                                          &trans           &trans           &trans                            &trans     &trans   &trans
&trans      &kp INS       &kp PSCRN        &kp K_CMENU     &trans           &trans                                                                &kp PG_UP        &trans           &kp UP                            &trans     &kp N0   &trans
&trans      &kp LALT      &kp LCTRL        &kp LSHFT       &trans           &kp CLCK                                                              &kp PG_DN        &kp LEFT         &kp DOWN                          &kp RIGHT  &kp DEL  &kp BSPC
&trans      &kp K_UNDO    &kp K_CUT        &kp K_COPY      &kp K_PASTE      &trans           &trans             &none                             &trans           &trans           &trans                            &trans     &trans   &trans
                          &rgb_ug RGB_OFF  &rgb_ug RGB_ON  &rgb_ug RGB_HUD  &rgb_ug RGB_HUI  &rgb_ug RGB_EFR    &rgb_ug RGB_COLOR_HSB(221,69,39)  &rgb_ug RGB_SAI  &rgb_ug RGB_SAD  &rgb_ug RGB_COLOR_HSB(126,99,30)  &trans
            >;
        };

        layer_3 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &kp LG(LS(V))                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                           &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                           &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans         &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans         &trans    &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
